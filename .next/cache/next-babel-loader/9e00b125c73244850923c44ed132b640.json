{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\91970\\\\Desktop\\\\first-next\\\\pages\\\\index.js\",\n    _this = this;\n\nimport React, { Component } from \"react\";\nimport Navbar from \"../Components/Navbar\";\nimport Link from \"next/link\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nvar fetchMoreData = function fetchMoreData() {\n  // a fake async api call like which sends\n  // 20 more records in 1.5 secs\n  setTimeout(function () {\n    _this.setState({\n      items: _this.state.items.concat(Array.from({\n        length: 20\n      }))\n    });\n  }, 1500);\n};\n\nvar Index = function Index(_ref) {\n  var photos = _ref.photos;\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <Navbar />\n    //   <h1>Our Index Page</h1>\n    //   <ul>\n    //     {photos.map((photo) => (\n    //       <li key={photo.id}>\n    //         <Link href={`/photo?id=${photo.urls.small}`} as=\"photo\">\n    //           <img src={photo.urls.small} width=\"500\" height=\"300\"></img>\n    //         </Link>\n    //       </li>\n    //     ))}\n    //   </ul>\n    // </div>\n    // <InfiniteScroll\n    //   dataLength={photos.length} //This is important field to render the next data\n    //   next={photos}\n    //   hasMore={true}\n    //   loader={<h4>Loading...</h4>}\n    //   endMessage={\n    //     <p style={{ textAlign: \"center\" }}>\n    //       <b>Yay! You have seen it all</b>\n    //     </p>\n    //   }\n    //   // below props only if you need pull down functionality\n    //   refreshFunction={photos}\n    //   pullDownToRefresh\n    //   pullDownToRefreshThreshold={50}\n    //   pullDownToRefreshContent={\n    //     <h3 style={{ textAlign: \"center\" }}>&#8595; Pull down to refresh</h3>\n    //   }\n    //   releaseToRefreshContent={\n    //     <h3 style={{ textAlign: \"center\" }}>&#8593; Release to refresh</h3>\n    //   }\n    // >\n    //   <ul>\n    //     //{\" \"}\n    //     {photos.map((photo) => (\n    //       <li key={photo.id}>\n    //         <Link href={`/photo?id=${photo.urls.small}`} as=\"photo\">\n    //           <img src={photo.urls.small} width=\"500\" height=\"300\"></img>\n    //         </Link>\n    //       </li>\n    //     ))}\n    //   </ul>\n    // </InfiniteScroll>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"demo: react-infinite-scroll-component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: photos.length,\n        next: fetchMoreData,\n        hasMore: true,\n        loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: photos.map(function (photo) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                href: \"/photo?id=\".concat(photo.urls.small),\n                as: \"photo\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: photo.urls.small,\n                  width: \"500\",\n                  height: \"300\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 17\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 15\n              }, _this)\n            }, photo.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, _this)\n  );\n};\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"https://api.unsplash.com/photos/?client_id=oPeX2b24aAVWiEmjKq0I2RRr6XbF_KpwUutWmFufaGU&per_page=400\");\n\n          case 2:\n            res = _context.sent;\n            data = res.data;\n            return _context.abrupt(\"return\", {\n              photos: data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/91970/Desktop/first-next/pages/index.js"],"names":["React","Component","Navbar","Link","axios","InfiniteScroll","fetchMoreData","setTimeout","setState","items","state","concat","Array","from","length","Index","photos","map","photo","urls","small","id","getInitialProps","ctx","get","res","data"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B;AACA;AACAC,EAAAA,UAAU,CAAC,YAAM;AACf,IAAA,KAAI,CAACC,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,KAAI,CAACC,KAAL,CAAWD,KAAX,CAAiBE,MAAjB,CAAwBC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAX,CAAxB;AADK,KAAd;AAGD,GAJS,EAIP,IAJO,CAAV;AAKD,CARD;;AASA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC5B;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE,QAAC,cAAD;AACE,QAAA,UAAU,EAAEA,MAAM,CAACF,MADrB;AAEE,QAAA,IAAI,EAAER,aAFR;AAGE,QAAA,OAAO,EAAE,IAHX;AAIE,QAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJV;AAAA,+BAME;AAAA,oBACGU,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD;AAAA,gCACV;AAAA,qCACE,QAAC,IAAD;AAAM,gBAAA,IAAI,sBAAeA,KAAK,CAACC,IAAN,CAAWC,KAA1B,CAAV;AAA6C,gBAAA,EAAE,EAAC,OAAhD;AAAA,uCACE;AAAK,kBAAA,GAAG,EAAEF,KAAK,CAACC,IAAN,CAAWC,KAArB;AAA4B,kBAAA,KAAK,EAAC,KAAlC;AAAwC,kBAAA,MAAM,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,eAASF,KAAK,CAACG,EAAf;AAAA;AAAA;AAAA;AAAA,qBADU;AAAA,WAAX;AADH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AA9CF;AAmED,CApED;;KAAMN,K;;AAqENA,KAAK,CAACO,eAAN;AAAA,uEAAwB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJnB,KAAK,CAACoB,GAAN,CAChB,qGADgB,CADI;;AAAA;AAChBC,YAAAA,GADgB;AAIdC,YAAAA,IAJc,GAILD,GAJK,CAIdC,IAJc;AAAA,6CAKf;AAAEV,cAAAA,MAAM,EAAEU;AAAV,aALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeX,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Navbar from \"../Components/Navbar\";\r\nimport Link from \"next/link\";\r\nimport axios from \"axios\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nconst fetchMoreData = () => {\r\n  // a fake async api call like which sends\r\n  // 20 more records in 1.5 secs\r\n  setTimeout(() => {\r\n    this.setState({\r\n      items: this.state.items.concat(Array.from({ length: 20 })),\r\n    });\r\n  }, 1500);\r\n};\r\nconst Index = ({ photos }) => {\r\n  return (\r\n    // <div>\r\n    //   <Navbar />\r\n    //   <h1>Our Index Page</h1>\r\n    //   <ul>\r\n    //     {photos.map((photo) => (\r\n    //       <li key={photo.id}>\r\n    //         <Link href={`/photo?id=${photo.urls.small}`} as=\"photo\">\r\n    //           <img src={photo.urls.small} width=\"500\" height=\"300\"></img>\r\n    //         </Link>\r\n    //       </li>\r\n    //     ))}\r\n    //   </ul>\r\n    // </div>\r\n    // <InfiniteScroll\r\n    //   dataLength={photos.length} //This is important field to render the next data\r\n    //   next={photos}\r\n    //   hasMore={true}\r\n    //   loader={<h4>Loading...</h4>}\r\n    //   endMessage={\r\n    //     <p style={{ textAlign: \"center\" }}>\r\n    //       <b>Yay! You have seen it all</b>\r\n    //     </p>\r\n    //   }\r\n    //   // below props only if you need pull down functionality\r\n    //   refreshFunction={photos}\r\n    //   pullDownToRefresh\r\n    //   pullDownToRefreshThreshold={50}\r\n    //   pullDownToRefreshContent={\r\n    //     <h3 style={{ textAlign: \"center\" }}>&#8595; Pull down to refresh</h3>\r\n    //   }\r\n    //   releaseToRefreshContent={\r\n    //     <h3 style={{ textAlign: \"center\" }}>&#8593; Release to refresh</h3>\r\n    //   }\r\n    // >\r\n    //   <ul>\r\n    //     //{\" \"}\r\n    //     {photos.map((photo) => (\r\n    //       <li key={photo.id}>\r\n    //         <Link href={`/photo?id=${photo.urls.small}`} as=\"photo\">\r\n    //           <img src={photo.urls.small} width=\"500\" height=\"300\"></img>\r\n    //         </Link>\r\n    //       </li>\r\n    //     ))}\r\n    //   </ul>\r\n    // </InfiniteScroll>\r\n    <div>\r\n      <h1>demo: react-infinite-scroll-component</h1>\r\n      <hr />\r\n      <InfiniteScroll\r\n        dataLength={photos.length}\r\n        next={fetchMoreData}\r\n        hasMore={true}\r\n        loader={<h4>Loading...</h4>}\r\n      >\r\n        <ul>\r\n          {photos.map((photo) => (\r\n            <li key={photo.id}>\r\n              <Link href={`/photo?id=${photo.urls.small}`} as=\"photo\">\r\n                <img src={photo.urls.small} width=\"500\" height=\"300\"></img>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\nIndex.getInitialProps = async (ctx) => {\r\n  const res = await axios.get(\r\n    \"https://api.unsplash.com/photos/?client_id=oPeX2b24aAVWiEmjKq0I2RRr6XbF_KpwUutWmFufaGU&per_page=400\"\r\n  );\r\n  const { data } = res;\r\n  return { photos: data };\r\n};\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}